name: Release

on:
  push:
    branches: [ main ]
    # tags:
    #   - "v*"

jobs:
  # build-linux:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v5

  #     - name: Install deps
  #       run: sudo apt-get update && sudo apt-get install -y libmagic-dev

  #     - name: Build Linux binary
  #       run: cargo build --release

  #     - name: Run tests
  #       run: cargo test --verbose

  #     - name: Upload Linux artifact
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: library-rs-linux
  #         path: target/release/library-rs

  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v5

      - uses: msys2/setup-msys2@v2
        with:
          msystem: UCRT64
          update: true
          install: >
            mingw-w64-ucrt-x86_64-file

      - name: Build Windows binary
        run: cargo build --release --target x86_64-pc-windows-gnu

      - name: Run tests
        run: cargo test --verbose

      - name: Upload Windows artifact
        uses: actions/upload-artifact@v4
        with:
          name: library-rs-windows
          path: target/x86_64-pc-windows-gnu/release/library-rs.exe

  # build-macos:
  #   runs-on: macos-latest
  #   env:
  #     PKG_CONFIG_PATH: /opt/homebrew/lib/pkgconfig
  #     LIBRARY_PATH: /opt/homebrew/lib
  #     CPATH: /opt/homebrew/include
  #   steps:
  #     - uses: actions/checkout@v5

  #     - name: Install libmagic
  #       run: brew install libmagic

  #     - name: Build macOS binary
  #       run: cargo build --release

  #     - name: Run tests
  #       run: cargo test --verbose

  #     - name: Upload macOS artifact
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: library-rs-macos
  #         path: target/release/library-rs

  # release:
  #   runs-on: ubuntu-latest
  #   needs: [build-linux, build-windows, build-macos]
  #   steps:
  #     - uses: actions/checkout@v5

  #     - name: Download all artifacts
  #       uses: actions/download-artifact@v4
  #       with:
  #         path: ./artifacts

  #     - name: Install cargo-binstall
  #       run: cargo install cargo-binstall

  #     - name: Generate binstall manifest
  #       id: version
  #       run: |
  #         VERSION=${GITHUB_REF#refs/tags/v}
  #         echo "version=$VERSION" >> $GITHUB_OUTPUT
  #         cargo binstall package --version $VERSION \
  #           --github-org ${{ github.repository_owner }} \
  #           --github-repo ${{ github.event.repository.name }} \
  #           --output ./artifacts/library-rs-${VERSION}.binstall.json

  #     - name: Create GitHub Release
  #       uses: softprops/action-gh-release@v1
  #       with:
  #         tag_name: ${{ github.ref }}
  #         name: Release ${{ github.ref }}
  #         files: |
  #           artifacts/library-rs-linux/library-rs
  #           artifacts/library-rs-windows/library-rs.exe
  #           artifacts/library-rs-macos/library-rs
  #           artifacts/library-rs-*.binstall.json
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
